version: '3.8'

services:
  postgres:
    image: postgres:15-alpine
    container_name: okami-postgres
    env_file: .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
    networks:
      - okami-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d $POSTGRES_DB"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: okami-api
    env_file: .env
    labels:
      - "traefik.http.routers.okamiapi.rule=Host(`okami-api.phmarques.com.br`)"
      - "traefik.http.routers.okamiapi.entrypoints=web,websecure"
      - "traefik.http.routers.okamiapi.tls.certresolver=myresolver"
    networks:
      - okami-network
      - web
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./src:/app/src:ro
      - ./package.json:/app/package.json:ro
      - ./tsconfig.json:/app/tsconfig.json:ro
      - ./prisma:/app/prisma:ro
      - ./uploads:/app/uploads
    command: sh -c "sleep 10 && bun run db:seed:users && bun --hot src/index.ts"
    restart: unless-stopped

  adminer:
    image: adminer
    container_name: okami-adminer
    ports:
      - "8080:8080"
    networks:
      - okami-network
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
    driver: local

networks:
  okami-network:
    driver: bridge
  web:
    external: true